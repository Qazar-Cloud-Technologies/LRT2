{% comment %}
Dynamic Grid Menu with Glass Effect and Motorcycle Theme
Includes carousel and collection navigation
{% endcomment %}

{{ 'mega-menu.css' | asset_url | stylesheet_tag }}

{%- style -%}
  /* Motorcycle Carousel Styles */
  .motorcycle-carousel {
    position: relative;
    width: 100%;
    height: 500px;
    overflow: hidden;
    background: #000;
    margin-bottom: 40px;
  }
  
  .carousel-container {
    position: relative;
    width: 100%;
    height: 100%;
  }
  
  .carousel-track {
    display: flex;
    transition: transform 0.5s ease;
    height: 100%;
  }
  
  .carousel-slide {
    position: relative;
    min-width: 100%;
    height: 100%;
    opacity: 0;
    transition: opacity 1s ease;
  }
  
  .carousel-slide.active {
    opacity: 1;
  }
  
  .carousel-slide img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  
  .carousel-overlay {
    position: absolute;
    bottom: 60px;
    left: 50%;
    transform: translateX(-50%);
    text-align: center;
    z-index: 2;
  }
  
  .carousel-title {
    font-family: monospace;
    font-size: 3rem;
    font-weight: 900;
    color: #ff0000;
    text-transform: uppercase;
    letter-spacing: 0.2em;
    margin: 0;
    text-shadow: 0 0 20px #ff0000, 0 0 40px #ff0000, 0 0 60px #ff0000;
    animation: glitch 2s infinite;
  }
  
  .carousel-subtitle {
    font-family: monospace;
    font-size: 1.2rem;
    color: #fff;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    margin-top: 10px;
    text-shadow: 0 0 10px rgba(255, 0, 0, 0.5);
  }
  
  .carousel-nav {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    background: rgba(255, 0, 0, 0.1);
    backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 0, 0, 0.3);
    color: #ff0000;
    font-size: 2rem;
    padding: 10px 20px;
    cursor: pointer;
    transition: all 0.3s ease;
    z-index: 3;
  }
  
  .carousel-nav:hover {
    background: rgba(255, 0, 0, 0.2);
    box-shadow: 0 0 20px rgba(255, 0, 0, 0.5);
  }
  
  .carousel-prev {
    left: 20px;
  }
  
  .carousel-next {
    right: 20px;
  }
  
  .carousel-dots {
    position: absolute;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    display: flex;
    gap: 10px;
    z-index: 3;
  }
  
  .carousel-dot {
    width: 12px;
    height: 12px;
    border-radius: 50%;
    background: rgba(255, 255, 255, 0.3);
    border: 1px solid rgba(255, 0, 0, 0.5);
    cursor: pointer;
    transition: all 0.3s ease;
  }
  
  .carousel-dot.active {
    background: #ff0000;
    box-shadow: 0 0 10px #ff0000;
  }
  
  @media (max-width: 768px) {
    .motorcycle-carousel {
      height: 300px;
    }
    
    .carousel-title {
      font-size: 2rem;
    }
    
    .carousel-subtitle {
      font-size: 1rem;
    }
  }
{%- endstyle -%}

{% comment %} Motorcycle Carousel Section {% endcomment %}
<div class="motorcycle-carousel">
  <div class="carousel-container">
    <div class="carousel-track">
      <div class="carousel-slide active">
        <img src="{{ 'BG_LRT.jpg' | asset_url }}" alt="Performance Motorcycles" loading="lazy">
        <div class="carousel-overlay">
          <h2 class="carousel-title" data-text="PERFORMANCE BIKES">PERFORMANCE BIKES</h2>
          <p class="carousel-subtitle">Unleash the power within</p>
        </div>
      </div>
      <div class="carousel-slide">
        <img src="{{ 'BG_LRT2.jpg' | asset_url }}" alt="Street Machines" loading="lazy">
        <div class="carousel-overlay">
          <h2 class="carousel-title" data-text="STREET MACHINES">STREET MACHINES</h2>
          <p class="carousel-subtitle">Built for the urban warrior</p>
        </div>
      </div>
    </div>
    <button class="carousel-nav carousel-prev" aria-label="Previous slide">‹</button>
    <button class="carousel-nav carousel-next" aria-label="Next slide">›</button>
    <div class="carousel-dots">
      <button class="carousel-dot active" aria-label="Slide 1" data-slide="0"></button>
      <button class="carousel-dot" aria-label="Slide 2" data-slide="1"></button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.querySelector('.motorcycle-carousel');
    if (!carousel) return;
    
    const slides = carousel.querySelectorAll('.carousel-slide');
    const dots = carousel.querySelectorAll('.carousel-dot');
    const prevBtn = carousel.querySelector('.carousel-prev');
    const nextBtn = carousel.querySelector('.carousel-next');
    let currentSlide = 0;
    
    function showSlide(index) {
      slides.forEach(slide => slide.classList.remove('active'));
      dots.forEach(dot => dot.classList.remove('active'));
      
      slides[index].classList.add('active');
      dots[index].classList.add('active');
      currentSlide = index;
    }
    
    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }
    
    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prev);
    }
    
    prevBtn.addEventListener('click', prevSlide);
    nextBtn.addEventListener('click', nextSlide);
    
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => showSlide(index));
    });
    
    // Auto-advance carousel
    setInterval(nextSlide, 5000);
  });
</script>

{% assign all_collections_array = collections | map: 'handle' %}
{% assign parent_collections = '' %}
{% assign all_parents_data = '' %}

{% comment %} Identify parent collections (no underscore in handle) {% endcomment %}
{% for handle in all_collections_array %}
  {% unless handle contains '_' %}
    {% assign collection = collections[handle] %}
    {% if collection.metafields.custom.show_in_menu == true %}
      {% assign order = collection.metafields.custom.order | default: 999 %}
      {% assign parent_collections = parent_collections | append: handle | append: ',' %}
      {% assign parent_data = handle | append: '|' | append: order %}
      {% assign all_parents_data = all_parents_data | append: parent_data | append: ',' %}
    {% endif %}
  {% endunless %}
{% endfor %}

{% comment %} Sort parents by order {% endcomment %}
{% assign parents_with_order = all_parents_data | split: ',' %}
{% assign sorted_parents = '' %}

{% comment %} Simple bubble sort for parent collections by order {% endcomment %}
{% for i in (1..99) %}
  {% assign lowest_order = 999 %}
  {% assign lowest_handle = '' %}
  
  {% for parent_data in parents_with_order %}
    {% if parent_data != blank %}
      {% assign parts = parent_data | split: '|' %}
      {% assign handle = parts[0] %}
      {% assign order = parts[1] | plus: 0 %}
      
      {% unless sorted_parents contains handle %}
        {% if order < lowest_order %}
          {% assign lowest_order = order %}
          {% assign lowest_handle = handle %}
        {% endif %}
      {% endunless %}
    {% endif %}
  {% endfor %}
  
  {% if lowest_handle != blank %}
    {% assign sorted_parents = sorted_parents | append: lowest_handle | append: ',' %}
  {% endif %}
  
  {% if sorted_parents contains lowest_handle %}
    {% continue %}
  {% endif %}
{% endfor %}

{% assign sorted_parents_array = sorted_parents | split: ',' %}

<nav class="grid-category-menu" role="navigation" aria-label="Category menu">
  <ul class="grid-menu-container">
    {% comment %} All Products Button {% endcomment %}
    <li class="grid-menu-item all-products">
      <a href="/collections/all" class="grid-menu-link">
        <span class="menu-text">ALL PRODUCTS</span>
      </a>
    </li>
    {% for parent_handle in sorted_parents_array %}
      {% if parent_handle != blank %}
        {% assign parent_collection = collections[parent_handle] %}
        {% if parent_collection %}
          {% comment %} Check if this parent has children {% endcomment %}
          {% assign has_children = false %}
          {% assign parent_prefix = parent_handle | append: '_' %}
          {% for handle in all_collections_array %}
            {% assign handle_start = handle | slice: 0, parent_prefix.size %}
            {% if handle_start == parent_prefix %}
              {% assign child_collection = collections[handle] %}
              {% if child_collection.metafields.custom.show_in_menu == true %}
                {% assign has_children = true %}
                {% break %}
              {% endif %}
            {% endif %}
          {% endfor %}
          
          <li class="grid-menu-item{% if has_children %} has-children{% endif %}">
            <a href="{{ parent_collection.url }}" class="grid-menu-link">
              <span class="menu-text">
                {% if parent_collection.metafields.custom.display_name %}
                  {{ parent_collection.metafields.custom.display_name }}
                {% else %}
                  {{ parent_collection.title }}
                {% endif %}
              </span>
            </a>
            
            {% if has_children %}
              {% comment %} Find and sort child collections {% endcomment %}
              {% assign children_data = '' %}
              {% assign parent_prefix = parent_handle | append: '_' %}
              {% for handle in all_collections_array %}
                {% assign handle_start = handle | slice: 0, parent_prefix.size %}
                {% if handle_start == parent_prefix %}
                  {% assign child_collection = collections[handle] %}
                  {% if child_collection.metafields.custom.show_in_menu == true %}
                    {% assign child_order = child_collection.metafields.custom.order | default: 999 %}
                    {% assign child_data = handle | append: '|' | append: child_order %}
                    {% assign children_data = children_data | append: child_data | append: ',' %}
                  {% endif %}
                {% endif %}
              {% endfor %}
              
              {% if children_data != blank %}
                {% assign children_with_order = children_data | split: ',' %}
                {% assign sorted_children = '' %}
                
                {% comment %} Sort children by order {% endcomment %}
                {% for i in (1..50) %}
                  {% assign lowest_child_order = 999 %}
                  {% assign lowest_child_handle = '' %}
                  
                  {% for child_data in children_with_order %}
                    {% if child_data != blank %}
                      {% assign child_parts = child_data | split: '|' %}
                      {% assign child_handle = child_parts[0] %}
                      {% assign child_order = child_parts[1] | plus: 0 %}
                      
                      {% unless sorted_children contains child_handle %}
                        {% if child_order < lowest_child_order %}
                          {% assign lowest_child_order = child_order %}
                          {% assign lowest_child_handle = child_handle %}
                        {% endif %}
                      {% endunless %}
                    {% endif %}
                  {% endfor %}
                  
                  {% if lowest_child_handle != blank %}
                    {% assign sorted_children = sorted_children | append: lowest_child_handle | append: ',' %}
                  {% endif %}
                {% endfor %}
                
                {% assign sorted_children_array = sorted_children | split: ',' %}
                
                <ul class="grid-dropdown" role="menu">
                  {% for child_handle in sorted_children_array %}
                    {% if child_handle != blank %}
                      {% assign child_collection = collections[child_handle] %}
                      {% if child_collection %}
                        <li role="none">
                          <a href="{{ child_collection.url }}" role="menuitem">
                            <span>
                              {% if child_collection.metafields.custom.display_name %}
                                {{ child_collection.metafields.custom.display_name }}
                              {% else %}
                                {{ child_collection.title }}
                              {% endif %}
                            </span>
                          </a>
                        </li>
                      {% endif %}
                    {% endif %}
                  {% endfor %}
                </ul>
              {% endif %}
            {% endif %}
          </li>
        {% endif %}
      {% endif %}
    {% endfor %}
    
    {% comment %} Calculate remaining slots needed for 18 total (minus 1 for All Products) {% endcomment %}
    {% assign total_items = sorted_parents_array | size | plus: 1 %}
    {% assign remaining_slots = 18 | minus: total_items %}
    
    {% comment %} Fill empty slots {% endcomment %}
    {% for i in (1..remaining_slots) %}
      <li class="grid-menu-item empty-slot">
        <div class="grid-menu-link placeholder">
          <span class="menu-text">COMING SOON</span>
        </div>
      </li>
    {% endfor %}
  </ul>
</nav>